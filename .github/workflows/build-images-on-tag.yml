name: Build Images on tag

on:
  push:
    tags:
    - 'v*' 

jobs:

  start-vm:
  
    runs-on: ubuntu-latest
    
    steps:
    - name: "Az login"
      shell: bash
      run: |
        az login --service-principal -u ${{ secrets.sp_appid }} -p ${{ secrets.sp_pwd }} --tenant ${{ secrets.sp_tenant }}
        
    - name: "Az start VM"
      shell: bash
      run: |
        az vm start --name dockerhost --resource-group gui-cont-gh-runner --no-wait

  build:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v1
    
    - uses: azure/docker-login@v1
      with:
        username: ${{ secrets.docker_user }}
        password: ${{ secrets.docker_pwd }}

    - name: Set up commands
      run: |
        $targets = @("ltsc2019", "2004", "ltsc2022")

        $version = ((Invoke-Expression "git describe --abbrev=0 --tags"))
        $name = "tobiasfenster/traefik-for-windows:$($version)"
        $latest = "tobiasfenster/traefik-for-windows:latest"
        
        $manifestCmd = "docker manifest create $($name)"
        $manifestPushCmd = "docker manifest push $($name)"
        $latestManifestCmd = "docker manifest create $($latest)"
        $latestManifestPushCmd = "docker manifest push $($latest)"

        $buildCmds = New-Object System.Collections.Generic.List[System.String]
        $imgPushCmds = New-Object System.Collections.Generic.List[System.String]
        $manifestCmds = New-Object System.Collections.Generic.List[System.String]
        $manifestPushCmds = New-Object System.Collections.Generic.List[System.String]
        $latestManifestCmds = New-Object System.Collections.Generic.List[System.String]
        $latestManifestPushCmds = New-Object System.Collections.Generic.List[System.String]

        for ($i=0; $i -lt $targets.length; $i++){
          $currImage = "$($name)-$($targets[$i])"

          $buildCmd = "docker build --isolation hyperv --build-arg BASE=$($targets[$i]) --build-arg VERSION=$version -t $currImage ."
          $buildCmds.Add($buildCmd)

          $imgPushCmds.Add("docker push $($currImage)")
          $manifestCmd = "$manifestCmd $currImage"
          $latestManifestCmd = "$latestManifestCmd $currImage"
        }

        $manifestCmds.Add($manifestCmd)
        $manifestPushCmds.Add($manifestPushCmd)
        $latestManifestCmds.Add($latestManifestCmd)
        $latestManifestPushCmds.Add($latestManifestPushCmd)

        echo "buildCmdsString=$($buildCmds -join "###")" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "imgPushCmdsString=$($imgPushCmds -join "###")" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "manifestCmdsString=$($manifestCmds -join "###")" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "manifestPushCmdsString=$($manifestPushCmds -join "###")" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "latestManifestCmdsString=$($latestManifestCmds -join "###")" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "latestManifestPushCmdsString=$($latestManifestPushCmds -join "###")" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

        echo $(jq -c '. + { "experimental": \"enabled\" }' "$env:DOCKER_CONFIG\config.json") | Out-File -Encoding ASCII "$env:DOCKER_CONFIG\config.json"

    - name: Build Docker images
      run: |
        $buildCmds = $env:buildCmdsString.Split("###", [StringSplitOptions]::RemoveEmptyEntries)

        foreach ($buildCmd in $buildCmds) {
          Write-Host $buildCmd
          Invoke-Expression $buildCmd
        }

    - name: Push Docker images
      run: |
        $imgPushCmds = $env:imgPushCmdsString.Split("###", [StringSplitOptions]::RemoveEmptyEntries)

        foreach ($imgPushCmd in $imgPushCmds) {
          Write-Host $imgPushCmd
          Invoke-Expression $imgPushCmd
        }

    - name: Create Docker manifests
      run: |
        $manifestCmds = $env:manifestCmdsString.Split("###", [StringSplitOptions]::RemoveEmptyEntries)

        foreach ($manifestCmd in $manifestCmds) {
          Write-Host $manifestCmd
          Invoke-Expression $manifestCmd
        }
        
        $latestManifestCmds = $env:latestManifestCmdsString.Split("###", [StringSplitOptions]::RemoveEmptyEntries)

        foreach ($latestManifestCmd in $latestManifestCmds) {
          Write-Host $latestManifestCmd
          Invoke-Expression $latestManifestCmd
        }

    - name: Push Docker manifests
      run: |
        $manifestPushCmds = $env:manifestPushCmdsString.Split("###", [StringSplitOptions]::RemoveEmptyEntries)

        foreach ($manifestPushCmd in $manifestPushCmds) {
          Write-Host $manifestPushCmd
          Invoke-Expression $manifestPushCmd
        }
        
        $latestManifestPushCmds = $env:latestManifestPushCmdsString.Split("###", [StringSplitOptions]::RemoveEmptyEntries)

        foreach ($latestManifestPushCmd in $latestManifestPushCmds) {
          Write-Host $latestManifestPushCmd
          Invoke-Expression $latestManifestPushCmd
        }
